[["index.html", "Welcome", " Welcome This is the homepage for ENST/MRNE 222 Environmental Data Science taught by Dr. Cassie Gurbisz in Spring 2023 at St. Mary’s College of Maryland. All course materials will be posted on this site, accessible through the Schedule page and the navigation bar on the left. This website was built with the bookdown R package with help from rstudio4edu. Course materials are largely adapted from Data Science in a Box "],["syllabus.html", "Syllabus Course description Course materials Learning outcomes Grading Assessment More information SMCM resources", " Syllabus Course: ENST/MRNE 222 Environmental Data Science Spring 2023 Class time and location: Mondays and Wednesdays 8:05 - 9:20 Anne Arundel North 111 Lab time and location: Wednesdays 1:10 - 4:20 Anne Arundel West 209 Instructor: Dr. Cassie Gurbisz (you’re welcome to call me Cassie) Email: cbgurbisz@smcm.edu Office hours: Tuesdays 11:00-1:00 Kent Hall 308 Website: https://enst222.github.io/website/ Course description Today’s environmental challenges are increasingly complex and involve vast amounts of data. With technological advances that make environmental measurements cheaper and easier and open science tools that make data more accessible, the environmental field could even be described as “drowning in data.” In this course, students will learn how to use tools from statistics and computer science to gain insight from environmental data without “drowning” in it. We will draw practical real-world meaning from complex datasets by interpreting our analyses in the context of previous environmental or marine science coursework. Throughout the course, we will use literate programming and version control tools to ensure that our analyses are reproducible and accessible. We will do all of this using R, one of the most popular and in-demand statistical programming languages in the environmental and ecological fields. Course materials Readings: All of the readings and software in this class are free and publicly available. There are free online versions of all the textbooks, and R, RStudio, and GitHub are also free. Two information sources which we’ll use most frequently are: R 4 Data Science Introduction to Modern Statistics Hardware: You’ll need to bring a laptop to class and lab every day. Make sure to also bring a charger. If you don’t have a laptop, please talk with me so we can get you a loaner. Software: For computing, we’ll be using Posit Cloud (formerly RStudio Cloud), which lets you access RStudio and all of the packages we’ll need right from your browser. Although R and RStudio are freely available to download onto your computer, working from a central cloud version ensures that we spend our class time learning to code rather than trouble shooting software issues. All of your work should be done in our class Posit Cloud RStudio workspace. You should receive an email invite to join the workspace. You can also request to join using this link. I do recommend that you download R and RStudio onto your computer at some point during the semester since you won’t have access to our cloud workspace after the course ends. You might also want to get your computer connected to GitHub so you can ask for help if you run into any problems. happywithgitr.com has very good instructions - be sure to follow them carefully and don’t skip any steps. Learning outcomes At the completion of this course, students will be able to gain insight from environmental data reproducibly and collaboratively using modern programming tools and techniques. Specific outcomes include being able to: visualize environmental data using ggplot2 wrangle and tidy data tables using dplyr functions to generate a suitable dataset for analysis use functions and iterative programming to automate analysis tasks define research questions and hypotheses construct statistical models to quantify patterns and make predictions interpret data in the context of prior knowledge in the environmental or marine science domains communicate results and document code using RMarkdown documents store data and code using a clean and clear system of organization use version control tools (Git and GitHub) to collaborate and share code Grading This is an “ungraded” course. I want you to focus on learning R and developing your quantitative reasoning skills without the stress of losing points over minor mistakes. Mistakes are inevitable in this type of course. In fact, making mistakes and fixing them is the best way to learn! Furthermore, research has shown that grading doesn’t improve learning and can sometimes even harm learning. Rather than submitting work to me “in exchange” for a letter or number grade, you will self-evaluate most of your assignments by comparing them to the provided solutions documents. In addition, your peers and I will provide qualitative feedback on your projects. This should help you think intentionally about what you’re learning, what you’re struggling with, and what you need to do to maximize your learning in the course. Hopefully, this will spark your inner motivation to do your best work. Brief learning reflections will be an important component of most assignments. Periodically throughout the semester, you will also submit more substantial learning reflections in which you give yourself a grade based on your progress in the course (since we still need to submit grades to the registrar at the end of the semester). We will meet individually at the end of the semester to discuss your overall progress. As the instructor, I have the final say in your grade. But I rarely find that changing a student’s self-assessed grade is necessary - I trust your judgment. Assessment Application exercises Occasionally we will work on brief application exercises during class to practice new tools and concepts. These will be posted as assignments in our Posit Cloud workspace. When you open an assignment, Posit Cloud will make a copy for you. Your changes will be automatically saved and I’ll be able to see your work. If you miss class, I will not check that you have completed the application exercises - they are mostly for demonstration purposes. But it would be a good idea to go through any missed application exercises to see how the tools covered that day work. Labs Labs afford us time to practice the concepts covered in class and work collaboratively on group projects. Some exercises will be relatively brief and can be completed during the designated lab time. Others will be more involved and may need to be finished for homework. Either way, lab assignments don’t need to be submitted until the following Wednesday before the next lab. That way, you will have time to collaborate further, clean things up, revise, etc. if needed. However, please be sure to complete lab assignments by the due date. At the beginning of each lab, I will typically post a solutions document for the previous lab assignment so you can self-evaluate your work and ask questions. If you do need to submit an assignment after the deadline, I ask that you not look at the solutions until you have completed the work. The labs are designed to help you learn, so you won’t be doing yourself any favors if you just copy the solutions! Data challenges Whereas labs typically involve guided exercises to help you learn how to use a particular set of tools, we will have two take-home, open-book data challenges to assess your ability to use these tools without as much guidance. Think of the labs as riding a bike with training wheels and the data challenges as a way of demonstrating that you’re ready to ride on your own. These should initially be done individually without any help from your peers so that we can assess your individual progress. A few days after each challenge deadline, you will have time in class to compare answers with your peers and work through any lingering problems. Then, as with lab exercises, I’ll post a solutions document so that you can evaluate your own work and reflect on your progress. Group projects Finally, the course also includes two open-ended group projects to demonstrate that you can ask a meaningful research question and apply the tools you have been learning to answer it using real environmental data. Keeping with our biking metaphor, you’ll have the freedom to ride wherever you want to go, completely free of training wheels. You’ll identify a topic with which you’re familiar from previous coursework to ensure that you have the disciplinary grounding needed to interpret your analysis. You must complete the final projects and make substantial code contributions to your group’s work in order to pass this course. Learning reflections Because this is an ungraded class, we will emphasize qualitative reflection to self-assess your learning. Most if not all of of your assignments will include a reflection component in which you think about what you learned through the assignment, what challenges you faced, etc. You will also write two more in-depth reflections during the semester to more broadly evaluate your progress in the course. It is very important that you put earnest effort into all of the reflections to show that you are thinking carefully about your learning in the absence of quantitative grades. More information Attendance and late work It is very important that you regularly attend class and lab. Everything we do builds on previously covered topics. So if you miss class or lab, you risk falling behind. I also know that life happens! If you need to miss class or lab, first make sure to communicate this with me. Then check the class schedule to see what you missed, review relevant slides and readings, and complete missed assignments on your own. If group-based project work took place, be sure to communicate with your team ASAP to come up with a plan for how you will contribute. Since this is an ungraded course, I will not automatically dock your grade due to absences. However, when you write your mid-semester and final learning reflections, you should carefully consider your attendance record - especially repeated absences - may have impacted your learning and, therefore, your grade. I am similarly flexible about late work. If you need an extra day or two to complete an assignment, just ask - it’s usually not a problem. However, you should think about the purpose of a particular due date and how a late submission will affect your learning. In the case of projects, a late submission might mean you will miss the opportunity to get feedback on your work. For assignments and data challenges, you might miss the chance to work collaboratively with your peers to solve stubborn data or coding challenges. You should take these learning opportunities into consideration before requesting an extension. Engaged learning SMCM has recently decreased the amount of time allocated to class meetings. To maintain the rigor of our 4-credit courses, students are expected to spend time outside of normal class meeting times engaging with course material. In this class, students can expect engaged learning to consist of coding exercises and collaborative group work completed during lab sessions. Office hours Office hours are set times dedicated to students. This means that I will be in my office waiting for you to come by talk to me. If you have a straightforward coding question, it’s usually easiest to address during lab. Office hours are better if you want to talk privately, or you have a more in-depth coding question. Sharing / reusing code and academic honesty A huge volume of code is available on the web to solve any number of problems. This is one of the fabulous things about R. So unless I explicitly tell you not to use something, the course’s policy is that you can - and should - make use of online resources. In fact, an important part of learning R is learning how to search the internet for coding solutions. With that being said, you should be mindful of the difference between applying an online solution to a coding problem and copying a complete analysis and calling it your own. While the former scenario helps you learn, the latter detracts from your learning and is considered plagiarism. I trust that you can distinguish between the two. Students should be familiar with the official SMCM academic policies as outlined in the Course Catalog. You may also read the Student Handbook To the Point to acquaint yourself with college guidelines and regulations. SMCM resources Accommodations and Accessibility: SMCM is committed to providing access to the learning and living experience to students with disabilities and disabling health conditions. If you have received a letter from the Office of Accessibility Services (OAS), which outlines the academic accommodations to which you are entitled to and you want those accommodations to apply to this course, you MUST share your letter and meet with me to review that letter. If you suspect that you have a learning or living need related to a disability or disabling health condition that could benefit from accommodations, you should contact the Office of Accessibility Services, who can help you learn more about how to proceed. Email: adasupport@smcm.edu The Wellness Center: If you find yourself struggling with your mental or physical health this semester, please let me know. I am one of many people here at SMCM who care about you and your welfare. The Wellness Center (240-895-4289) provides numerous confidential health and counseling services including same day/next day connections to counseling by calling 240-895-4289 or emailing the Director at jljolly@smcm.edu. To learn more about Wellness Center Services please go to their webpage at https://www.smcm.edu/wellness/ Office of Student Support Services: The Office of Student Success Services (OS3) provides free tutoring services and academic coaching with professional staff and Peer Academic Success Strategies (PASS) Specialists. You may drop into the PASS office in 230 Glendening for walk-in appointments on Mondays 11:30-1:00 and Tuesdays 4:30 to 6:00. You can also email PASS@smcm.edu. For tutoring for a specific course, please email your request to tutoring@smcm.edu. For any other help call 240-895-4388 or email os3@smcm.edu. The Writing and Speaking Center: Located on the first floor of the main Library, the Writing &amp; Speaking Center offers free peer tutoring in writing and speaking. The peer tutors are students themselves, but they have completed extensive hands-on training to learn how to assist their peers at any step of the process (planning, drafting, or revising) for any writing or speaking assignment. The peer tutors will not make decisions about revision for you and will instead work collaboratively with you to discuss ideas and consider options so that you can choose how best to revise on your own. This collaborative approach is one of the best ways to help students develop their abilities because all writers and speakers need audiences—just ask the peer tutors, who often schedule tutorials with each other. To make an appointment, please visit www.smcm.edu/writingcenter and click the “Schedule an Appointment” button. If you have questions or need assistance, please contact Director Ben Click at baclick@smcm.edu. Office of Title IX Compliance and Training: St. Mary’s College of Maryland is committed to helping create a safe and open learning environment for all students. If you (or someone you know) have experienced any form of sexual misconduct, including sexual assault, dating or domestic violence, or stalking, know that help and support are available. The College strongly encourages all community members to take action, seek support, and report incidents of sexual misconduct to the Title IX Office. Under Title IX of the Education Amendments of 1972, I am required to disclose information about such misconduct to the Title IX Office. If you would like to talk to a confidential employee who does not have this reporting responsibility, you can contact SMCM Wellness Center or Health Services at (240) 895-4289. For more information about reporting options and resources at St. Mary’s College of Maryland and the community, please visit the Office of Title IX Compliance and Training. "],["schedule.html", "Schedule", " Schedule The table below contains the slides, lab assignments, and application exercises covered each day and when assignments are due. resources links to information sources that cover course topics in detail. You should always have these open as you work on assignments or exercises related to those particular topics. It wouldn’t be a bad idea to have relevant slides open as well. excercises can be accessed directly through our Posit Cloud workspace. For each lab, data challenge, and course project, I will create a repository for each student or team. You’ll clone your repo into your Posit Cloud workspace and complete the work from there. day date slides lab exercises resources due M 1/16 No class - MLK Day W 1/18 Welcome and Meet the toolkit lab-01 ae-01and ae-02 R4DS Ch 1 M 1/23 Data and visualization ae-03 1-6 R4DS Ch 3 and Ch 4 W 1/25 Numerical data and Categorical data lab-02 ae-03 8-12 R4DS Ch 3 and Ch 4 lab-01 M 1/30 Tidy data ae-04 R4DS Ch 5 W 2/1 Single data frames slides; video and multiple data frames slides; video lab-03 ae-05 and ae-06 R4DS Ch 5 and Ch 13 lab-02 M 2/6 Tidying data ae-07 R4DS Ch 12 W 2/8 Data types lab-04 ae-08 R4DS Ch 20 lab-03 M 2/13 Data classes ae-08 R4DS Ch 15 and Ch 16 W 2/15 Importing and recoding data lab-05 ae-09 R4DS Ch 11 M 2/20 Effective data viz ae-10 ggplot2 book; Fundamentals of Data Visualization project-1-proposal W 2/22 Doing data science lab-06 ae-10 R4DS Ch 7 lab-05 M 2/27 Functions ae-11 R4DS Ch 19 W 3/1 Functions (cont.) ae-12 R4DS 21 M 3/6 Peer review project-1 draft project-1-draft W 3/8 No class or lab; meet with group to work on project F 3/10 mid-semester learning reflection S 3/12 project-1-draft for CBG review M 3/13 No class - spring break W 3/15 No class - spring break M 3/20 W 3/22 S 3/26 project-1-final M 3/27 Iteration ae-13 W 3/29 Iteration (cont.) lab-07 ae-14 M 4/3 The language of models ae-15 R4DS Ch 23 W 4/5 Fitting and interpreting models lab-08 ae-16 Open Intro Ch 7 lab-07 M 4/10 Model checking and nonlinearity ae-17 Open Intro Ch 5.7 W 4/12 Models with multiple predictors lab-09 and project ae-17 Open Intro Ch 8 lab-08 M 4/17 More models with multiple predictors ae-18 Open Intro Ch 8 project-2-proposal W 4/19 Tying up loose ends project group work M 4/24 Spatial data project-2-draft W 4/26 Spatial data (cont.) project group work F 4/28 project-2-draft F 5/5 project-2- final M-F May 1-5 Individual meetings final learning reflection is due the night before your individual meeting "],["exercises.html", "Exercises", " Exercises Application exercises will be posted and completed in Posit Cloud. If the class schedule indicates that we worked on a particular exercise, you can find it posted as an “assignment” in the class Posit Cloud workspace. If you miss class, I will not check whether you complete these, but they are a good place to start to catch up on what you missed. Solutions, if applicable, will be available to view in the exercises repo. "],["labs-1.html", "Labs lab-01 lab-02 lab-03 lab-04 lab-05 lab-06 lab-07 lab-08 lab-09 lab-10 lab-11 lab-12 lab-13", " Labs To complete the labs, I will make an individual GitHub repo for each student. You’ll clone the repo into your Posit Cloud RStudio workspace, complete the assignment, and push your work back to GitHub. Solutions will be posted in each lab repo on the ENST222-SP2023 GitHub organization page lab-01 Hello R!: This lab exercise is designed to get you set up with the computational tools we will be using throughout the semester. Use the instructions linked below to get started. They will walk you through everything else you need to do. Note that you will submit your work by knitting your final RMarkdown document, committing your changes using Git, and pushing your changes to your GitHub lab-01 repository. Don’t worry if this sounds very foreign - you will learn all about it in lab. lab-01 instructions lab-01-solutions lab-02 Global plastic waste: In this lab, you’ll practice visualizing numeric and categorical data using the ggplot2 package. To get started, go to the course GitHub organization and locate your assignment repo, which should be named lab-02-YOUR_GITHUB_USERNAME. Copy the URL of the repo, and clone it in RStudio. Refer to Lab 01 for step-by-step instructions on cloning a repo into an RStudio project. Open the R Markdown document lab-02.Rmd and follow the instructions in the doc. There is not a separate instructions file for this lab. Questions and instructions are included in the template file provided. lab-02-solutions lab-03 Global deforestation: In this lab, we continue to ask questions and answer them by visualizing data. We also begin to practice data wrangling and tidying. Questions and instructions are included in the template file provided. To get started, go to the course GitHub organization and locate your assignment repo, which should be named lab-03-YOUR_GITHUB_USERNAME. Copy the URL of the repo, and clone it in RStudio. Refer to Lab 01 for step-by-step instructions on cloning a repo into an RStudio project. lab-03-solutions lab-04 Introduction to project-1 and Git conflicts: First we will meet our Project 1 teams and go over the details of our first course project. Then we’ll learn about how to code collaboratively using GitHub and how to resolve inevitable merge conflicts. Instructions for our merge conflict activity are linked below. We’ll also catch up on the concepts we’ve covered so far in class. lab-04 instructions lab-05 Data wrangling and project-1 group work: Today we’ll work more on data wrangling and you’ll spend some time working on your project-1 proposal. To get started, go to the course GitHub organization and locate your assignment repo, which should be named lab-05-YOUR_GITHUB_USERNAME. Copy the URL of the repo, and clone it in RStudio. Refer to Lab 01 for step-by-step instructions on cloning a repo. lab-05-solutions lab-06 Exploratory data analysis: In this lab, we will review lab-05, discuss the exploratory data analysis slides, and walk through an example project analysis on CO2 emissions (you can find this in R Studio Cloud in the lab-06-co2-case-study assignment). You’ll then have time to confer with me and work with your team on project 1. You don’t have to submit anything for this lab. Instead, you should continue to make progress on your project. lab-07 project-1 group work lab-08 Iteration and project-1 group work lab-09 Modeling and project-2 group work lab-10 Modeling and peer review project-2 proposal lab-11 project-2 group work lab-12 Spatial data and project-2 group work lab-13 project-2 group work "],["challenges.html", "Challenges", " Challenges To complete the data challenges, I will make an individual GitHub repo for each student. You’ll clone the repo into your Posit Cloud RStudio workspace, complete the challenge, and push your work back to GitHub. I will also post links to the challenge docs here for your reference. Solutions will be available in the challenges repo "],["projects.html", "Projects TL;DR 0.1 Example project What and why Data Collaborative coding Deliverables Project evaluation Tips", " Projects TL;DR For Project 1, pick an environmental dataset on a topic you already know something about, ask a question, and answer it using data. For Project 2, also do some stats! 0.1 Example project The CO2 case study is an example project to give you a sense of what constitutes a great final product. You can access the CO2 case study through this github repo or in the class R Studio Cloud workspace (lab-06-co2-case-study). What and why The goal of the projects is to apply the techniques we have covered in class to a novel dataset in a meaningful way. The mid-semester project should emphasize data wrangling, tidying, and visualization, and the end of semester project should additionally incorporate statistical modeling (bonus “points” if you use spatial data as well). For both projects, you will analyze any environmental dataset you’d like, with the one requirement that it be related to a topic with which you are already familiar. Data analysis is usually most powerful if you have expertise in a relevant topic area and can, therefore, ask questions and draw conclusions that are well-grounded in that disciplinary domain. So this is a good opportunity to apply previous coursework or experiences in a new, perhaps more quantitative context. You don’t necessarily need to do an exhaustive data analysis (i.e., do not calculate every statistic or visualize every variable), but rather demonstrate that you are proficient at: asking meaningful questions and answering them through data analysis using R and GitHub to code collaboratively presenting and interpreting your results using literate, reproducible programming (i.e., RMarkdown) for project 2, using statistical analysis to draw more rigorous conclusions To that end, you should focus on your research questions and work backwards from there. Think about what types of analysis and visualizations will help you answer your question and how your data need to be wrangled or tidied in order to complete those tasks. You’ll probably need to do some initial exploratory data analysis to get a sense of what types of questions you might ask. As you enter the analysis stage, you can stick to the packages we learned in class (tidyverse) or push yourself explore others if they will improve your analysis. Finally, give careful thought to how you communicate your analysis. Neatness, coherency, and clarity are all important. If at any point you are having trouble, don’t hesitate to ask for help before it’s too late. The main reason we have a lab session is so you can work while I’m in the room to provide immediate assistance. Take advantage of it! Data In order for you to have the greatest chance of success with this project it is important that you choose a manageable dataset. This means that the data should be readily accessible and large enough that multiple relationships can be explored. As such, your dataset should have at least 50 observations and between 10 to 20 variables (exceptions can be made but you must speak with me first). The dataset’s variables should include both categorical and numerical variables. If you are using a dataset that comes in a format that we haven’t encountered in class, make sure that you are able to load it into R as this can be tricky depending on the source. Please don’t reuse datasets we have already analyzed in class. Below is a list of data repositories that might be of interest to browse. These are not all exclusively environmental data repositories, although some of them are. You’re not limited to these resources - you are welcome to identify your own datasets as well. TidyTuesday Bikeshare data portal Kaggle datasets Awesome public datasets Harvard Dataverse Chesapeake Bay Program Data Hub USGS National Water Information System US EPA Toxic Release Inventory NSF Long Term Ecological Research Data Portal US EPA Environmental Dataset Gateway NOAA National Centers for Environmental Information Collaborative coding These are group projects for a reason - they will force you to learn how to code collaboratively. Code conflicts are inevitable and indeed very annoying. But learning how to fix them is an important skill. Embrace the messiness and try not to get too frustrated - I am here to help. Googling error messages is usually helpful as well. It should go without saying, but everyone needs to make significant code contributions to each project. Because we are using Git and GitHub, I can see each person’s commits, including what you did and when you did it. So it is very obvious if one person is doing most of the work, for example, or another person waited till the last minute to make a few sloppy contributions. Deliverables Proposal Introduction (2 paragraphs) The introduction should introduce your general research question and your data. In the first paragraph, provide background information to introduce the topic. You should do some research and cite relevant sources to provide context that is grounded in the literature. For example, if I wanted to know whether there was evidence of increasing hurricane intensity in the storms dataset we have previously worked with, I would briefly review the scientific literature on why and how we know hurricanes are becoming more intense. The topic should be something you’ve already researched in some way so that you have enough expertise to spend most of your time analyzing your data rather than reading about your topic. In the second paragraph, state your research question and provide a brief overview of your dataset (where it came from, how it was collected, etc.). Please cite references parenthetically using author-date format (author’s last name, year of publication) using any citation style you’d like. APA is generally straightforward. Data (1-2 paragraphs) Provide a more detailed description of your dataset, including names of files (if you have more than one), number of observations, and names of files. Then use the skim() function to provide a detailed summary of each dataset. Be sure to place your data in the `/data` folder of your project GitHub repository. Data analysis plan (2-4 paragraphs) This section should include a brief description of - The outcome (response, Y) and predictor (explanatory, X) variables you will use to answer your question, if applicable - The comparison groups you will use, if applicable - Very preliminary exploratory data analysis, including summary statistics and visualizations, along with some explanation on how they help you learn more about your data - The method(s) that you believe will be useful in answering your question(s). - What results from these specific methods are needed to support your hypothesized answer? References cited Include a list of any references you cited. You can use any citation format you’d like as long as the citations are clean and consistent. If you’re not sure, APA is a straightforward default. README file The README file is like the home page of a GitHub repository. This is an important component of reproducible data analysis - someone should be able to access your GitHub repo, quickly learn what you did and why you did it in the README, and then access your analysis. Your project template includes a README.md template file. You should add your project title and author names to the README template, then populate the “Executive summary” and “Data dictionary” sections. Report The report will more or less follow the same format as the proposal, with some additional content to contextualize your topic and present your results. Introduction (at least 3-4 paragraphs) The content should be the same as your proposal introduction, but with an additional 1-2 paragraphs to expand on your background information. Please aim to cite 3-5 information sources. Data (1-2 paragraphs) Same guidelines as the proposal. Methods (2-4 paragraphs) This section should include a description of the methods you used and why these methods were the right approach for answering your research question(s). Include any packages you used and provide a citation for each package. Start with a general overview of your approach, and then fill in the details. You don’t necessarily need to describe every single function you used and line of code you wrote. Focus instead on the big picture: why and how you wrangled the data, created new variables, calculated data summaries, made comparisons, identified relationships and patterns, etc. Results and discussion (at least 3-4 paragraphs but more is ok) This section should present and discuss the results of your data analysis with an emphasis on how each of your results helps you answer your research question(s). Whereas a typical scientific paper generally includes separate results and discussion sections, here we will combine them to make the report more interesting and readable. It needs to include narrative text as well as code output (i.e., figures, tables, etc.). You should organize this section around each of your key findings. Be sure to explain what each visualization is illustrating and how the ways in which the data are presented help to address your question. Discuss why we might be seeing particular patterns, relationships, trends, differences, etc. This is where your domain knowledge comes in again - you need to have a good sense of the underlying phenomena that are represented by your data in order to develop well-founded explanations. You may find that it will be helpful to cite additional information sources to help contextualize your results, but it really depends on the dataset, so these additional citations are optional. Please also include a discussion of the limitations of your analysis, what you would do if you had more time, etc. References cited Same guidelines as the proposal. README summary Make sure to update your README.md file so that it reflects the content of your final report. Repo organization The following folders and files should be in your project repository: proposal.Rmd + proposal.md: Your proposal documents report.Rmd + report.md: Your report documents README.md: your README file containing a project summary and metadata /data: folder containing your dataset(s) in CSV or RDS format Your repo should not contain any other files. You may find it useful to create some “scratch” files to do exploratory analysis or code testing outside of your project file. But these files should be removed from your final repository. Our goal is to create a clean, fully reproducible repository that could be made public. That means that only your final, well-documented work should be included. Project evaluation Question and data: The research question should be well-designed and the data should be relevant to the research question. Methods: Appropriate analytical methods should be used to address the research question. Creativity and critical thought: The project should be carefully designed and implemented, and limitations/shortcomings should be thoughtfully discussed. Professional polish: The figures and writing should follow best practices (be free of errors, well-organized, polished, etc.). Syntax: The report should take advantage of R Markdown syntax to format for clarity (e.g., plain text, code chunks, bulleted lists, headings, embedded hyperlinks, inline code, etc.) Time management: The team should equitably distribute time spent on the project. Collaboration: The team should work as a cohesive unit to collaboratively complete the project. This involves good communication and defining clear expectations for each other. Reproducibility: Entire analysis can be run by an independent user in a new R Studio session and README file contains a project summary and metadata description. Tips You’re working in the same repo as your teammates now, so merge conflicts will happen and that’s fine. Commit and push often. And ask questions when stuck. Each team member should be contributing, both in terms of quality and quantity. Talk to me if you have any issues with this. Set aside time to work together and apart (physically). In your knitted/rendered report file, your code should be hidden (use echo = FALSE in your code chunks) so that your document is neat and easy to read. However your document should include all of your code so that if I re-knit your R Markdown file I should be able to obtain the results you presented. Make sure to knit your final report, commit it, and then push to GitHub! "],["reflections.html", "Reflections Mid-semester learning reflection Final learning reflection", " Reflections Our assessment system in this class is “ungrading.” As The Case Against Grades shows, grading doesn’t improve learning and can sometimes even harm learning. Rather than submitting work to me for feedback in exchange for a letter or number grade, your peers and I will provide qualitative feedback. You’ll decide whether and how the work should be revised so that your work best reflects your own learning progress. This system is designed to spark your inner motivation to do your best work. Periodically, you’ll reflect on your learning process and the products of your work and give yourself a letter grade, since we still need to submit grades to the registrar at the end of the semester. Mid-semester learning reflection Recall that by the completion of this course, students should be able to gain insight from environmental data reproducibly (with literate programming and version control) and collaboratively using modern programming tools and techniques. Specific outcomes include being able to: visualize data using ggplot2 wrangle and tidy data tables using dplyr functions to generate a suitable data set for analysis use functions and iterative programming to automate analysis tasks define research questions and hypotheses construct statistical models to quantify patterns and make predictions interpret data in the context of prior knowledge in the environmental or marine science domains communicate results and document code using RMarkdown documents store data and code using a clean and clear system of organization use version control tools (Git and GitHub) to collaborate and share code Please discuss your growth so far with respect to these objectives. Talk about what, specifically, you have learned in the course. What exactly have you done that has helped you learn? What can you change about your work habits and processes to get the most out of the course? Comment on the quality of your work and contributions to the class learning community so far. Are you putting your best effort into participating in class and lab activities? Are you regularly attending class and lab? Is your work polished and professional? Finally, if you had to give yourself a letter grade at this point, what would it be and why? Remember that grades are meant to reflect your learning, not necessarily your effort. Usually, the more effort you put into your work, the more you will naturally learn. But please try to be intentional about distinguishing between the two. Your reflection should be detailed and thoughtful - you should aim for at least ~300 words. Please write a cohesive narrative rather than a list of responses to the prompts. Please submit your reflection using the mid-semester learning reflection form Final learning reflection The assignment is the same as above, but you should reflect on your cumulative learning throughout the entire semester. Please submit your reflection using the final learning reflection form "],["help.html", "Help! Course texts R function documentation The internet Other good resources", " Help! The following are suggestions for where to get help if you’re stuck. Course texts They include most of what will be covered in class: R 4 Data Science Introduction to Modern Statistics R function documentation The help() function and ? help operator in R provide access to the documentation pages for R functions, data sets, and other objects, both for packages in the standard R distribution and for contributed packages. To access documentation for the standard lm (linear model) function, for example, enter the command help(lm) or help(\"lm\"), or ?lm or ?\"lm\" (i.e., the quotes are optional). Each function help page follows the same format. They start with a brief DESCRIPTION of what the package does. The USAGE section shows the various arguments you need to specify when using the function - some will be required, some will be optional. ARGUMENTS very briefly describes each of the arguments that you need to specify. The DETAILS section varies, but the author of the function generally gives more details about the function. VALUE tells you what the outputs of the function will be. EXAMPLES gives you some code snippets to show how the function is used in practice. These are very useful if you’re learning R. The internet There are internet search sites that are specialized for R searches, including search.r-project.org (which is the site used by RSiteSearch) and Rseek.org. It is also possible to use a general search site like Google, by qualifying the search with “R” or the name of an R package (or both). It can be particularly helpful to paste an error message into a search engine to find out whether others have solved a problem that you encountered. Other good resources Posit cheatsheets give a good quick overview of how to use the functions in popular R packages The R Style Guide provides guidelines for writing readable and maintainable R code ggplot2 book Fundamentals of Data Visualization book RMarkdown Cookbook "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
